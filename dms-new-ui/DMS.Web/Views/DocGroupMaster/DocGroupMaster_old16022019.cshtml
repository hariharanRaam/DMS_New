@using Kendo.Mvc.UI;
@using Kendo.Mvc.UI.Fluent;
@using Kendo.Mvc.Extensions;
@model  DMS.Model.DepartmentMaster_Model
@{
    List<DMS.Model.DocGroupMaster_Model.DocGroupDynamicLabel> labellist = new List<DMS.Model.DocGroupMaster_Model.DocGroupDynamicLabel>();
    //menuList = DMS.Service.UserGroups_Service.GetMenu();
    var r = new DMS.Service.DocGroupMaster_Service();
    //   labellist = r.GetDoclabelsrv();

}
<!Doctype html>
<html>
<head>
    <title></title>
    <style>
        .error_show {
            color: red;
            margin-left: 10px;
        }

        .k-grid-header th.k-header > .k-link {
            width: 100px;
        }

        .k-grid-header {
            font-weight: bold;
        }

        .k-state-active {
            display: none;
        }

        .k-content {
            font-weight: normal;
            font-size: 13px;
        }

        .k-header {
            font-weight: bold;
        }
    </style>
</head>
<body class="hold-transition skin-blue sidebar-mini fixed">
    <div class="content-wrapper">
        <section class="content">
            <div class="row">
                <div class="col-md-12">
                    <div class="box box-orange" style="height:650px">
                        <div class="box-header text-center with-border">
                            <h3 class="box-title">Doc Group</h3>
                        </div>
                        <div class="col-md-9">
                            <table>
                                <tr>
                                    <td>
                                        <button type="submit" onclick="return toolbar_click()" class="btn btn-danger pull-left"><span class="fa fa-plus-circle"></span> Add New</button>
                                    </td>

                                </tr>
                            </table>
                        </div>
                        @*@(Html.Kendo().Grid<DMS.Model.DocGroupMaster_Model>().Name("DocGroup")
                            .HtmlAttributes(new { style = "width:100%;line-height:2em;font-weight:normal" })
                            .Columns(columns =>
                            {
                                columns.Bound(m => m.DgroupId).Title("SL No").Width(80);
                                columns.Bound(m => m.DgroupName).Title("Doc Group").Width(20);
                                columns.Bound(m => m.Dgroup_shortname).Title("Short Name").Width(20);
                                //for (int k = 0; k < labellist.Count; k++) {
                                //    columns.Bound(labellist[k].orghierarchy_code).Title(labellist[k].orghierarchy_name).Width(20);
                                //}

                                columns.Bound(m => m.Org_Level1).Title("Department").Width(20);
                                columns.Bound(m => m.Org_Level2).Title("Unit").Width(20);
                                columns.Command(cmd => { cmd.Edit(); }).Title("Edit").Width(50);
                                columns.Template(p => { }).ClientTemplate("<button type='button' onclick='return myDeleteJs()'><i class='fa fa-trash-o' aria-hidden='true'></i>Delete</button>").Width(50).Title("Delete");
                            })
                            .ToolBar(toolbar => toolbar.Create())
                            .Editable(ed => ed.Mode(GridEditMode.PopUp).TemplateName("DocGroupMasterDropdown"))
                                    .Pageable(pageable => pageable
                                                .Refresh(true)
                                                .PageSizes(true)
                                                .ButtonCount(5))
                                    .Filterable()
                            .Sortable()
                            .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(10)
                            .Events(events => events.Error("error_handler"))
                            .Model(model => model.Id(p => p.DgroupId))
                            .Update(update => update.Action("DocGroupGrid_Update", "DocGroupMaster"))
                                    .Create(Create => Create.Action("DocGroupGrid_Save", "DocGroupMaster").Data("setparams"))
                            .Read(read => read.Action("DocGroupGrid_Read", "DocGroupMaster"))))*@
                        <div id="DocGroup" class="col-md-9" style="width:100%;line-height:2em;font-weight:normal"> </div>
                        <div class="row" id="divAttachment">
                            <div class="col-md-12 table-responsive">
                                @(Html.Kendo().Window()
                                .Name("kdropdownwindow")
                                .Events(ev => ev.Close("RefreshDatasource_Exemption"))
                                .Title("Doc Group") //set the title of the window
                                .Content(@<text> @Html.Partial("DocGroupMasterDropdown") </text>)
                                        .Draggable()
                                        .Resizable()
                                        //.Width(1000)
                                        // .Height(450)
                                        .Modal(true)
                                        .Visible(false))

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</body>
</html>
<script type="text/javascript">
    var isDateField = [];
    var mode = "";
    var docgropid = "";
    var orglevelcode1 = "";
    var orglevelcode2 = "";
    var orglevelcode3 = "";
    var orglevelcode4 = "";
    var record = 0;
    $(document).ready(function () {
        debugger;
        loaddynamiccolumns();
        loadgriddata();

        //// $("#DocGroup").data("kendoGrid").dataSource.bind("requestEnd", onRequestEnd);
        // var grid = $("#grid").data("kendoGrid");
        // //function for changing kendo popup title.
        // grid.bind("edit", function (event) {
        //     debugger;
        //     event.container.parent().find('.k-window-title').text(event.model.isNew() ? "New" : "Edit");
        // });
    })

    function loadgriddata() {
        try {

            //load grid data:
            debugger;
            $.ajax({
                url: '@Url.Action("DocGroupGridread", "DocGroupMaster")',
                type: "post",
                data: {},
                success: function (result) {
                    debugger;
                    // generateGrid(result);

                    if (result != null && result != "" && result != "undefined") {
                        var columns = [];
                        var chkval = JSON.parse(result.Data1);
                        var arr = [];
                        $.each(chkval, function (i, e) {
                            debugger;
                            $.each(e, function (key, val) {
                                arr.push(val);
                            });

                        });

                        if (arr == "No Records Found!" || arr == "Error in Data!") {
                            $.alert({
                                title: 'DMS',
                                content: 'No Records found..!',
                                type: 'blue',
                            });
                            $('#btnbulmail').prop('disabled', true);
                            return false;
                        }

                        var data = JSON.parse(result.Data1);
                        var data2 = JSON.parse(result.Data2);
                        var i = 0;

                        var entryIndex = "entries[" + i + "]";
                        columns.push({
                            title: "Sl No",
                            template: "#= ++record #"

                        });


                        for (var key in data[0]) {
                            var val = data2[0][key];
                            columns.push({
                                field: entryIndex,
                                title: key,
                                type: val
                            });
                            i = i + 1;
                            entryIndex = "entries[" + i + "]";

                        }
                        columns.push({
                            field: entryIndex + 1,
                            title: 'Action',
                            template: '<span class="btn btn-orange fa fa-edit edit" name="Edit" id="Edit" value="Edit" onclick="editpopup()"></span> <span class="btn btn-orange fa fa-trash trash" name="Delete" id="Delete" value="Delete" onclick="myDeleteJs()"></span>',
                            filterable: false,
                            sortable: true,
                            width: 80,
                            editable: true
                        });
                        //columns.push({
                        //    field: entryIndex + 1,
                        //    title: 'Edit',
                        //    template: '<button type="button" onclick="editpopup()"><i class="fa fa-trash-o" aria-hidden="true"></i>Edit</button>',

                        //    filterable: false,
                        //    sortable: true,
                        //    editable: true
                        //});
                        //columns.push({
                        //    field: entryIndex + 1,
                        //    title: 'Delete',
                        //    template: '<button type="button" onclick="myDeleteJs()"><i class="fa fa-trash-o" aria-hidden="true"></i>Delete</button>',
                        //    //template: '<span class="glyphicon glyphicon-download Download" name="Download" id="Download" value="Download" onclick="Download()"></span>',
                        //    filterable: false,
                        //    sortable: true,
                        //    editable: true
                        //});

                        var rows = [];
                        var data1 = JSON.parse(result.Data1);

                        $.each(data1, function (i, e) {
                            var entryArray = [];
                            $.each(e, function (key, val) {

                                entryArray.push(val);
                            });
                            rows.push(kendo.observable({
                                entries: entryArray
                            }));

                        });

                        var viewModel = kendo.observable({
                            gridRows: rows
                        });

                        var configuration = {
                            // dataBound: onDataBound,
                            editable: false,
                            // sortable: true,
                            scrollable: false,
                            filterable: true,
                            //   filterable: true,
                            pagable: false,
                            resizable: true,
                            //   persistSelection: true,
                            //  selectable: "false",
                            pageable: {
                                pageSize: 10,
                                buttonCount: 5,
                                //     pageSizes: [10, 20, 30, 40, 50]
                            },
                            columns: columns,
                            rows: viewModel,
                            dataBinding: function () {
                                record = (this.dataSource.page() - 1) * this.dataSource.pageSize();
                            }
                        };


                        $("#example").remove();
                        $('#DocGroup').append('<div id="example" style="position:relative" class="k-content"><table id="grid" data-bind="source: gridRows" style="position:relative;overflow:scroll;width:100%"></table></div>');
                        var timeEditGrid = $("#grid").kendoGrid(configuration).data("kendoGrid");

                        kendo.bind($("#grid"), viewModel);

                        var grid = $("#grid").data("kendoGrid");
                        if (orglevelcode4 != "" && orglevelcode4 != null && orglevelcode4 != "undefined") {
                            grid.hideColumn(8);
                            grid.hideColumn(9);
                            grid.hideColumn(10);
                            grid.hideColumn(11);
                        } else if (orglevelcode3 != "" && orglevelcode3 != null && orglevelcode3 != "undefined") {
                            grid.hideColumn(7);
                            grid.hideColumn(8);
                            grid.hideColumn(9);
                            grid.hideColumn(10);
                            grid.hideColumn(11);
                        } else if (orglevelcode2 != "" && orglevelcode2 != null && orglevelcode2 != "undefined") {
                            grid.hideColumn(6);
                            grid.hideColumn(7);
                            grid.hideColumn(8);
                            grid.hideColumn(9);
                            grid.hideColumn(10);
                            grid.hideColumn(11);
                        } else if (orglevelcode1 != "" && orglevelcode1 != null && orglevelcode1 != "undefined") {
                            grid.hideColumn(5);
                            grid.hideColumn(6);
                            grid.hideColumn(7);
                            grid.hideColumn(8);
                            grid.hideColumn(9);
                            grid.hideColumn(10);
                            grid.hideColumn(11);
                        }
                        //grid.hideColumn(3);
                        // grid.hideColumn(5);
                        //  grid.hideColumn(6);
                        for (var i = 0; i < grid.columns.length; i++) {
                            if (i != grid.columns.length) {
                                grid.autoFitColumn(i);  //autofit each column.

                            }
                        }
                    } else {
                        $.alert({
                            title: 'DMS',
                            content: "Info" + "No data Found",
                            type: 'red',
                        });
                    }
                },
                error: function (result) {
                    // alert("Error" + result.Data1);
                    $.alert({
                        title: 'DMS',
                        content: "Error" + result.Data1,
                        type: 'red',
                    });
                }
            });

        } catch (er) {
            alert(er);
        }
    }

    function loaddynamiccolumns() {
        try {
            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                async: false,
                url: '@Url.Action("getlabellist", "DocGroupMaster")',
                data: "{}",
                success: function (data) {
                    debugger;
                    // var orglevelcode1 = data[0].orghierarchy_code;
                    if (data.length >= 1) {
                        orglevelcode1 = data[0].orghierarchy_code;
                        // orglevelval1 = $("#" + orglevelcode1).val();
                    }
                    if (data.length >= 2) {
                        orglevelcode2 = data[1].orghierarchy_code;
                        // orglevelval2 = $("#" + orglevelcode2).val();
                    }
                    if (data.length >= 3) {
                        orglevelcode3 = data[2].orghierarchy_code;
                        //orglevelval3 = $("#" + orglevelcode3).val();
                    }
                    if (data.length == 4) {
                        orglevelcode4 = data[3].orghierarchy_code;
                        //orglevelval4 = $("#" + orglevelcode4).val();
                    }


                    // alert(orglevelcode1);
                    //setTimeout(function () {
                    //    window.location.reload(1);
                    //}, 2500);
                },
            });
        } catch (er) {
            alert(er);
        }
    }
    function toolbar_click() {
        debugger;
        mode = "I";
        docgropid = "0";
        var wdw = $("#kdropdownwindow").data("kendoWindow"); //get the Window widget's instance
        wdw.open();
        wdw.center();
        $("#dgroupname").val('');
        $("#shortname").val('');
        if (orglevelcode4 != null && orglevelcode4 != "" && orglevelcode4 != "undefined") {
            $("#" + orglevelcode4).data("kendoDropDownList").select(0)
        }
        if (orglevelcode3 != null && orglevelcode3 != "" && orglevelcode3 != "undefined") {
            $("#" + orglevelcode3).data("kendoDropDownList").select(0)
        }
        if (orglevelcode2 != null && orglevelcode2 != "" && orglevelcode2 != "undefined") {
            $("#" + orglevelcode2).data("kendoDropDownList").select(0)
        }
        if (orglevelcode1 != null && orglevelcode1 != "" && orglevelcode1 != "undefined") {
            $("#" + orglevelcode1).data("kendoDropDownList").select(0);
        }
    }
    function editpopup() {
        debugger;
        try {
            var grid = $("#grid").data("kendoGrid");
            var model = grid.dataItem($(event.target).closest("tr"));
            docgropid = model.entries[0];
            var docgroupname = model.entries[1];
            var docgroupshort = model.entries[2];
            var orglevel1 = model.entries[7];
            var orglevel2 = model.entries[8];
            var orglevel3 = model.entries[9];
            var orglevel4 = model.entries[10];
            mode = "U";
            var wdw = $("#kdropdownwindow").data("kendoWindow"); //get the Window widget's instance
            wdw.open();
            wdw.center();
            $("#dgroupname").val(docgroupname);
            $("#shortname").val(docgroupshort);

            //if (orglevel4 != "" && orglevel4 != null && orglevel4 != "undefined") {
            //    //var dl4 = $("#" + orglevelcode4).data("kendoDropDownList");
            //    //dl4.select(function (dataItem) {
            //    //    return dataItem.symbol === orglevel4;
            //    //});
            //    $("#" + orglevelcode4).data("kendoDropDownList").value(orglevel4)
            //} else if (orglevel3 != "" && orglevel3 != null && orglevel3 != "undefined") {
            //    $("#" + orglevelcode3).data("kendoDropDownList").value(orglevel3)
            //} else if (orglevel2 != "" && orglevel2 != null && orglevel2 != "undefined") {
            //    $("#" + orglevelcode2).data("kendoDropDownList").value(orglevel2)
            //} else {
            //    $("#" + orglevelcode1).data("kendoDropDownList").value(orglevel1)
            //}
            try {
                if (orglevelcode4 != "" && orglevelcode4 != null && orglevelcode4 != "undefined") {
                    $("#" + orglevelcode4).data("kendoDropDownList").value(orglevel4)
                }
                if (orglevelcode3 != "" && orglevelcode3 != null && orglevelcode3 != "undefined") {
                    $("#" + orglevelcode3).data("kendoDropDownList").value(orglevel3)
                }
                if (orglevelcode2 != "" && orglevelcode2 != null && orglevelcode2 != "undefined") {
                    $("#" + orglevelcode2).data("kendoDropDownList").value(orglevel2)
                }
                if (orglevelcode1 != "" && orglevelcode1 != null && orglevelcode1 != "undefined") {
                    $("#" + orglevelcode1).data("kendoDropDownList").value(orglevel1)
                }
            } catch (er) {
            }
            // alert(out);

        } catch (er) {
            alert(er);
        }
    }

    function save() {
        debugger;
        try {
            var orglevelval1 = "";
            var orglevelval2 = "";
            var orglevelval3 = "";
            var orglevelval4 = "";
            var Docgroupname = "";
            var Shortname = "";
            //     var DocgrpId = "";


            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                async: false,
                url: '@Url.Action("getlabellist", "DocGroupMaster")',
                data: "{}",
                success: function (data) {
                    debugger;
                    // var orglevelcode1 = data[0].orghierarchy_code;
                    if (data.length >= 1) {
                        orglevelcode1 = data[0].orghierarchy_code;
                        orglevelval1 = $("#" + orglevelcode1).val();
                    }
                    if (data.length >= 2) {
                        orglevelcode2 = data[1].orghierarchy_code;
                        orglevelval2 = $("#" + orglevelcode2).val();
                    }
                    if (data.length >= 3) {
                        orglevelcode3 = data[2].orghierarchy_code;
                        orglevelval3 = $("#" + orglevelcode3).val();
                    }
                    if (data.length == 4) {
                        orglevelcode4 = data[3].orghierarchy_code;
                        orglevelval4 = $("#" + orglevelcode4).val();
                    }


                    DocgroupName = $("#dgroupname").val();
                    //  alert(DocgroupName);
                    Shortname = $("#shortname").val();
                    //  alert(Shortname);
                    if (DocgroupName == "" || DocgroupName == null || DocgroupName == "undefined" || DocgroupName == 0) {
                        //   alert("DocgroupName Cannot be Empty");
                        $.alert({
                            icon: 'fa fa-success',
                            title: 'DMS',
                            // theme: 'dark',
                            content: 'DocgroupName Cannot be Empty.!',
                            type: 'yellow',
                            animationSpeed: 700,
                        });
                        return false;
                    } else if (Shortname == "" || Shortname == null || Shortname == "undefined" || Shortname == 0) {
                        // alert("ShortName Cannot be Empty");
                        $.alert({
                            icon: 'fa fa-success',
                            title: 'DMS',
                            // theme: 'dark',
                            content: 'DocgroupName Cannot be Empty.!',
                            type: 'yellow',
                            animationSpeed: 700,
                        });
                        return false;
                    } else if ((orglevelcode1 != "" && orglevelcode1 != "" && orglevelcode1 != "undefined") && (orglevelval1 == "" || orglevelval1 == null || orglevelval1 == "undefined" || orglevelval1 == 0)) {
                        alert(orglevelcode1 + " Cannot be Empty");
                        //$.alert({
                        //    icon: 'fa fa-success',
                        //    title: 'DMS',
                        //    // theme: 'dark',
                        //    content: 'DocgroupName Cannot be Empty.!',
                        //    type: 'yellow',
                        //    animationSpeed: 700,
                        //});
                        return false;
                    }
                    else if ((orglevelcode2 != "" && orglevelcode2 != "" && orglevelcode2 != "undefined") && (orglevelval2 == "" || orglevelval2 == null || orglevelval2 == "undefined" || orglevelval2 == 0)) {
                        alert(orglevelcode2 + " Cannot be Empty");
                        //$.alert({
                        //    icon: 'fa fa-success',
                        //    title: 'DMS',
                        //    // theme: 'dark',
                        //    content: 'DocgroupName Cannot be Empty.!',
                        //    type: 'yellow',
                        //    animationSpeed: 700,
                        //});
                        return false;
                    }
                    else if ((orglevelcode3 != "" && orglevelcode3 != "" && orglevelcode3 != "undefined") && (orglevelval3 == "" || orglevelval3 == null || orglevelval3 == "undefined" || orglevelval3 == 0)) {
                        alert(orglevelcode3 + " Cannot be Empty");
                        //$.alert({
                        //    icon: 'fa fa-success',
                        //    title: 'DMS',
                        //    // theme: 'dark',
                        //    content: 'DocgroupName Cannot be Empty.!',
                        //    type: 'yellow',
                        //    animationSpeed: 700,
                        //});
                        return false;
                    }
                    else if ((orglevelcode4 != "" && orglevelcode4 != "" && orglevelcode4 != "undefined") && (orglevelval4 == "" || orglevelval4 == null || orglevelval4 == "undefined" || orglevelval4 == 0)) {
                        alert(orglevelcode4 + " Cannot be Empty");
                        //$.alert({
                        //    icon: 'fa fa-success',
                        //    title: 'DMS',
                        //    // theme: 'dark',
                        //    content: orglevelcode4 + 'Cannot be Empty.!',
                        //    type: 'yellow',
                        //    animationSpeed: 700,
                        //});
                        return false;
                    } else {
                        // if (mode == "I") {
                        //   alert("insert");
                        // Create.Action("DocGroupGrid_Save", "DocGroupMaster").Data("setparams"));
                        if (orglevelval4 == "undefined" || orglevelval4 == null) {
                            orglevelval4 = "";
                        }
                        if (orglevelval3 == "undefined" || orglevelval3 == null) {
                            orglevelval3 = "";
                        }
                        if (orglevelval2 == "undefined" || orglevelval2 == null) {
                            orglevelval2 = "";
                        }
                        if (orglevelval1 == "undefined" || orglevelval1 == null) {
                            orglevelval1 = "";
                        }

                        $.ajax({
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            async: false,
                            url: '@Url.Action("DocGroupGrid_Save", "DocGroupMaster")?DocGrpID=' + docgropid + '&DocGrpNm=' + DocgroupName + '&ShortName=' + Shortname + '&Org_Level1val=' + orglevelval1 + '&Org_Level2val=' + orglevelval2 + '&Org_Level3val=' + orglevelval3 + '&Org_Level4val=' + orglevelval4 + '&mode=' + mode,
                            data: "{}",
                            success: function (data) {
                                var out = "";
                                if (mode == "U") {
                                    out = "Doc Group has been Edited successfully!"
                                } else {
                                    out = "Doc Group has been Created successfully!"
                                }
                                debugger;
                                $.dialog({
                                    title: 'DMS',
                                    content: out,
                                    type: 'green',
                                });
                                closeopup();
                            }, error: function (result) {
                                // alert("Error" + result.Data1);
                                $.alert({
                                    title: 'DMS',
                                    content: "Error" + result,
                                    type: 'red',
                                });
                                closeopup();
                            }
                        });
                        //} else {
                        //    alert("update");
                        //}
                    }

                    // alert(orglevelcode1);
                    //setTimeout(function () {
                    //    window.location.reload(1);
                    //}, 2500);
                },
            });
        } catch (er) {
            alert(er);
        }
    }

    function closeopup() {
        debugger;
        try {
            var wdw = $("#kdropdownwindow").data("kendoWindow"); //get the Window widget's instance
            wdw.close();
            loadgriddata();
        } catch (er) {

        }
    }

    function setparams() {

        /*
    var MasterTypeId = $("#MasterTypeId").val();

        //alert(MasterTypeId);
        if (MasterTypeId == null || MasterTypeId.length==0)
        {
            MasterTypeId = "QCD_mst_tdepartment";
        }
        else
        {
            MasterTypeId = $("#MasterTypeId").val();
        }
        alert(MasterTypeId);
        //Session["MasterType"]=MasterTypeId;
        */
        debugger
        var orglevelval1 = "";
        var orglevelval2 = "";
        var orglevelval3 = "";
        var orglevelval4 = "";
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            async: false,
            url: '@Url.Action("getlabellist", "DocGroupMaster")',
            data: "{}",
            success: function (data) {
                debugger;
                // var orglevelcode1 = data[0].orghierarchy_code;
                if (data.length >= 1) {
                    var orglevelcode1 = data[0].orghierarchy_code;
                    orglevelval1 = $("#" + orglevelcode1).val();
                }
                if (data.length >= 2) {
                    var orglevelcode2 = data[1].orghierarchy_code;
                    orglevelval2 = $("#" + orglevelcode2).val();
                }
                if (data.length >= 3) {
                    var orglevelcode3 = data[2].orghierarchy_code;
                    orglevelval3 = $("#" + orglevelcode3).val();
                }
                if (data.length == 4) {
                    var orglevelcode4 = data[3].orghierarchy_code;
                    orglevelval4 = $("#" + orglevelcode4).val();
                }


                // alert(orglevelcode1);
                //setTimeout(function () {
                //    window.location.reload(1);
                //}, 2500);
            },
        });



        return {

            Org_Level1val: orglevelval1, Org_Level2val: orglevelval2, Org_Level3val: orglevelval3, Org_Level4val: orglevelval4

        }
    }



    function onChangeunit(parent_code) {
        debugger;
        try {
            var mastercode = this.value();
            var master = ""
            if (mastercode == "" || mastercode == null || mastercode == "undefined" || mastercode == 0) {
                return false;
            }
            else {
                $.getJSON("DocGroupNames/DocGroupMaster?parentcode=" + master + "&dependcode=" + mastercode, function (data) {
                    debugger;
                    var dept = data;


                    //$("#Dept_Id").data("kendoDropDownList").dataSource.data(data[1]);
                    if (dept.length > 1) {
                        var ee = data[1].parent_code;
                        //$("#" + ee).data("kendoDropDownList").dataSource.data(data);
                        $("#" + ee).data("kendoDropDownList").value(data[1].master_code);
                        //$("#" + ee).data("kendoDropDownList").select(1)
                        $("#" + ee).data("kendoDropDownList").trigger("change");
                        //$("#Dept_Id").data("kendoDropDownList").refresh();
                    }
                    else {
                        var ee = data[0].parent_code;
                        //  $("#" + ee).data("kendoDropDownList").select(0)
                    }

                });
            }
        } catch (er) {
            hideProgress();
        }
    }

    function onRequestEnd(e) {
        debugger;
        //Check request type
        if (e.type == "create") {
            //check for errors in the response
            if (e.response == null || e.response.Errors == null) {
                $.dialog({
                    title: 'DMS',
                    content: 'Doc Group has been created successfully!',
                    type: 'green',
                });
                setTimeout(function () {
                    window.location.reload(1);
                }, 2500);
            }
        }
        if (e.type == "update") {
            //check for errors in the response
            if (e.response == null || e.response.Errors == null) {
                $.dialog({
                    title: 'DMS',
                    content: 'Doc Group has been Edited successfully!',
                    type: 'green',
                });
                setTimeout(function () {
                    window.location.reload(1);
                }, 2500);
            }
        }
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.alert({
                title: 'DMS',
                content: message,
                type: 'blue',
            });
        }
    }

    function myDeleteJs() {
        debugger;
        try {
            mode = "D";
            var grid = $("#grid").data("kendoGrid");
            var model = grid.dataItem($(event.target).closest("tr"));
            docgropid = model.entries[0];

            $.confirm({
                icon: 'fa fa-warning',
                title: 'DMS',
                autoClose: 'cancel|10000',
                theme: 'dark',
                animationSpeed: 700,
                content: 'Are you sure do you want to delete this record!',
                type: 'orange',
                buttons: {
                    confirm: function () {
                        $.ajax({
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            async: false,
                            url: '@Url.Action("DocGroupGrid_Save", "DocGroupMaster")?DocGrpID=' + docgropid + '&mode=' + mode,
                            data: "{}",
                            success: function (data) {
                                debugger;
                                if (data == 'Success') {
                                    $.alert({
                                        icon: 'fa fa-success',
                                        title: 'DMS',
                                        theme: 'dark',
                                        content: 'Record deleted.!',
                                        type: 'green',
                                        animationSpeed: 700,
                                    });
                                }
                                setTimeout(function () {
                                    window.location.reload(1);
                                }, 2500);
                            },
                        });

                    },
                    cancel: function () {
                        $.alert({
                            icon: 'fa fa-success',
                            title: 'DMS',
                            theme: 'dark',
                            content: 'Delete Canceled.!',
                            type: 'blue',
                            animationSpeed: 700,
                        });
                    },
                }
            });
        } catch (er) {

        }
    }
    function RefreshDatasource_Exemption() {
        debugger;
        //   $("#grid").data("kendoGrid").dataSource.read();
        //var wdw = $("#kdropdownwindow").data("kendoWindow"); //get the Window widget's instance
        //wdw.close();
        loadgriddata();
    }
</script>
