@model DMS.Model.ViewDocuments_Model.RequestRerival1
@{
    ViewBag.Title = "ViewDespatch";
}
<style>
    .k-dropdown-wrap.k-state-default {
        background-clip: padding-box;
        display: block;
        height: 90%;
        width: initial;
        padding: 0.4375rem 1.875rem 0.4375rem 0.875rem;
        -moz-padding-start: calc(0.875rem - 3px);
        font-size: 0.7075rem;
        font-weight: 400;
        line-height: 1.15;
        color: #697a8d;
        background-color: #fff;
        background-repeat: no-repeat;
        background-position: right 0.875rem center;
        background-size: 17px 12px;
        border: 1px solid #d9dee3;
        border-radius: 0.375rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        -webkit-appearance: none;
        -moz-appearance: none;
    }

    .k-item {
        background-color: #fff;
        background-position: right 0.875rem center;
    }

    .k-content {
        width: 100%;
    }
    /*.k-button{
             background-color: transparent;
              color: blue;
              border: aliceblue;

        }*/
    .k-grid {
        color: #697a8d;
        background-color: #fff;
    }

    .k-grid-header th.k-header {
        text-overflow: ellipsis;
        text-align: center;
        text-transform: none;
        font-size: 0.75rem;
        letter-spacing: 1px;
        font-weight: 500;
    }

    .k-pager-info {
        float: right;
        text-transform: none;
        font-size: 0.75rem;
        letter-spacing: 1px;
        font-weight: 500;
        padding: 0 1.333em;
    }

    .k-pager-sizes {
        display: inline-block;
        padding-top: 1px;
        text-transform: none;
        font-size: 0.90rem;
        letter-spacing: 1px;
        font-weight: 500;
    }

    .k-footer {
        background-color: #fff;
    }

    .k-widget {
        background-color: #fff;
    }

    .k-header {
        background-color: #fff;
    }

    .k-grid td {
        white-space: nowrap;
        background-color: #eceef1;
        border-color: inherit;
        /* text-align: center; */
    }

    .k-state-selected {
        color: #000;
        border-color: inherit;
    }
</style>
<div class="content-wrapper">
    <!-- Main content -->
    <div class="container-xxl flex-grow-1 container-p-y">
        <div class="card-body" style="margin-top:-9px;">
            <h5 class="mobile-card-header">Trainer Master</h5>
            <form id="formAccountSettings" method="POST" onsubmit="return false">
                <div class="row" id="header">
                    <div class="mb-3 col-md-5">

                    </div>
                    <div class="mb-3 col-md-4">
                    </div>
                    <div class="mb-3 col-md-3">
                        <div class="icons"><a href="~/DespatchtRetrieval/RetrivalChk"><img src="/Assets/images/toplist.png" data-bs-toggle="tooltip" data-bs-placement="bottom" title="" data-bs-original-title="List" aria-label="List"></a></div>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;">
                    <div class="col-sm-3" style="width: 23.5%;">
                        <label class="form-label" for="req_id">Request ID</label>
                        <input type="text" id="req_id" value="@Model.Request_No" class="form-control" placeholder="" readonly>
                    </div>
                    <div class="col-sm-3" style="width: 23.5%;">
                        <label class="form-label" for="req_date">Request Date</label>
                        <input type="text" id="req_date" class="form-control" placeholder="" value="@Model.RequestDate" readonly>
                    </div>
                    <div class="col-sm-3" style="width: 23.5%;">
                        <label class="form-label" for="rqd_date">Required Date</label>
                        <input type="text" id="rqd_date" class="form-control" placeholder="" value="@Model.RequiredDate" readonly>
                    </div>
                    <div class="col-sm-3" style="width: 23.5%;">
                        <label class="form-label" for="no_docs"># Docs</label>
                        <input type="text" id="no_docs" class="form-control" placeholder="" value="@Model.NOofDoc" readonly>
                    </div>
                </div>
                <div class="row" style="margin-top:18px;">
                    <div class="col-sm-3" style="width: 23.5%;">
                        <label class="form-label" for="doname">Document Type</label>
                        <input type="text" id="doname" class="form-control" placeholder="" value="@Model.Docname" readonly>
                        <input type="hidden" id="doname_id" class="form-control" placeholder="" value="@Model.Docname_Id">
                    </div>
                    <div class="col-sm-3" style="width: 23.5%;">
                        <label class="form-label" for="docgrp">Document Group</label>
                        <input type="text" id="docgrp" class="form-control" placeholder="" value="@Model.Docgroup" readonly>
                        <input type="hidden" id="docgrp_id" class="form-control" placeholder="" value="@Model.Docgroup_Id">
                    </div>
                    <div class="col-sm-3" style="width: 23.5%;">
                        <label class="form-label" for="req_note">Request Note</label>
                        <input type="text" id="req_note" class="form-control" placeholder="" value="@Model.Request_Note" readonly>
                    </div>
                    <div class="col-sm-3" style="width: 23.5%;">
                        <label class="form-label" for="req_by">Requested By</label>
                        <input type="text" id="req_by" class="form-control" placeholder="" value="@Model.Request_From" readonly>
                    </div>
                </div>
                <div class="row" style="margin-top:10px;" hidden>
                    <div class="col-sm-6">
                        <label class="form-label" for="subvertical">Request Note</label>
                        <input type="text" class="form-control" placeholder="" readonly>
                    </div>
                    <div class="col-sm-3">
                        <label class="form-label" for="subvertical">Requested By</label>
                        <input type="text" class="form-control" placeholder="" readonly>
                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-sm-3" style="width: 23.5%;">
                        <label class="form-label" for="Despatchdate">Received Date&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
                        <input type="date" id="Despatchdate" class="form-control" placeholder="">
                    </div>
                    <div class="col-sm-4" style="width: 35%;">
                        <label class="form-label" for="DespatchNote"> Note</label>
                        <input type="text" id="DespatchNote" class="form-control" placeholder="">
                    </div>
                    <div class="col-sm-2">
                        <img src="/Assets/images/brush.png" style="margin-top:24px;">&nbsp;&nbsp;<button type="submit" id="updatebtn" class="btn btn-sm btn-primary me-2" style="margin-top:24px;" onclick="Update()">Update</button>
                    </div>
                </div>
                <div class="row" style="margin-top:20px;">
                    <div id="Maingrid" class="col-sm-12">
                    </div>
                </div>
            </form>
        </div>
    </div>
    <!-- /.content -->
</div>

<script type="text/javascript">
    var showresult1flag = 'Y';
    $(document).ready(function () {
        var slno = 0;

        debugger;
        $("#navhead").text("Auto Numbering");
        getScreenAccess(40, "Auto numbering");
    })

    function getScreenAccess(screenID, screenName) {
        debugger;
        var result_;
        $.ajax({
            // type: "POST",
            contentType: "application/json; charset=utf-8",
            //   async: false,
            url: '@Url.Action("getScreenData", "UserGroupsMapping")',
            data: { 'screen_id': screenID, 'screen_name': screenName },
            success: function (data) {
                debugger;
                //  var grid = $("#kdropdownwindow").data("kendoGrid");

                var data1 = JSON.parse(data.Data1);
                if (data1[0].add_perm == "1" || data1[0].mod_perm == "1") {

                }
                    
                else if (data1[0].inactivate_perm == "1") {
                    
                    $("#updatebtn").attr('disabled', true);
                }

                else if (data1[0].view_perm == "1") {
                    
                    $("#updatebtn").attr('disabled', true);

                    
                }

                else if (data1[0].deny_perm == "1") {
                    
                    $("#updatebtn").attr('disabled', true);
                }
                else {
                    $("#updatebtn").attr('disabled', true);
                }
               
            },
            error: function (data) {


            }
        });
    }
</script>

<script type="text/javascript">
    var objDialog5;
    $(document).ready(function () {
        $("#navhead").text("Despatch Retrieval");
        $('#btnupdate').prop('disabled', true);
        Getsummary();
        //loaddata_();
        fetchgridnew();
    });
    function Getsummary() {
        var checkedIds = {};
        var data = @Html.Raw(Json.Encode(Model.Despatchdropdown));
        for (var i = 0; i < data.length; i++) {
            var opt = new Option(data[i].despatchmode_Name, data[i].despatchmode_gid);
            var opt2 = new Option(data[0].despatchmode_Name, data[0].despatchmode_gid);
            $('#DespatchMode').append(opt);
        }
    }

    var checkedIds = {};
    function GetDetailData() {
        debugger
        var grid1 = $("#grid").data("kendoGrid");

        // Get checked row by getting the input and then the row containing the input
        var row1 = $("#retrievalcheckbox:checked", grid1.tbody).closest("tr");
        if (row1.length == 0) {
            $.alert({
                title: 'DMS',
                content: 'Select any one records in MainGrid to get Attributes.!',
                type: 'blue',
            });
            return false;
        }
        var Retriveid = [];
        var Retriveid1;
        for (var i = 0; i < row1.length; i++) {
            var item1 = grid1.dataItem(row1[i]);
            var Grid1ID = item1.entries[0];
            Retriveid.push(Grid1ID);
        }
        var count1 = row1.length;
        if (Retriveid != 0 && Retriveid != null && Retriveid != "") {
            Retriveid1 = Retriveid.join(",");
        }

        $.ajax({
            url: '@Url.Action("RetrivalchkdetData", "DespatchtRetrieval")',
            data: { 'Retrivid': Retriveid1 },
            success: function (result) {
                debugger;
                var columns = [];
                var chkval = JSON.parse(result.Data1);
                var arr = [];
                $.each(chkval, function (i, e) {
                    debugger;
                    $.each(e, function (key, val) {
                        arr.push(val);
                    });

                });

                if (arr == "No Records Found!" || arr == "Error in Data!") {
                    $.alert({
                        title: 'DMS',
                        content: 'No Records found..!',
                        type: 'blue',
                    });
                    $('#btnbulmail').prop('disabled', true);
                    return false;
                }


                var data = JSON.parse(result.Data1);
                var data2 = JSON.parse(result.Data2);
                var i = 0;

                var entryIndex = "entries[" + i + "]";
                columns.push({
                    title: "Select",
                    template: '<input type="checkbox" name="retrievalchdcheckbox" id="retrievalchdcheckbox" value="" class="checkbox" ></span>'

                });

                for (var key in data[0]) {
                    var val = data2[0][key];
                    columns.push({
                        field: entryIndex,
                        title: key,
                        type: val
                    });
                    i = i + 1;
                    entryIndex = "entries[" + i + "]";

                }


                columns.push({
                    field: entryIndex + 1,
                    title: 'View File',
                    template: '<span class="fa fa-eye view" name="view" id="view" value="view"   onclick=View("main")></span>',
                    //template: '<span class="glyphicon glyphicon-download Download" name="Download" id="Download" value="Download" onclick="Download()"></span>',
                    filterable: false,
                    sortable: true,
                    editable: true
                });

                var rows = [];
                var data1 = JSON.parse(result.Data1);

                $.each(data1, function (i, e) {
                    var entryArray = [];
                    $.each(e, function (key, val) {

                        entryArray.push(val);
                    });
                    rows.push(kendo.observable({
                        entries: entryArray
                    }));

                });

                var viewModel = kendo.observable({
                    gridRows: rows
                });

                var configuration = {
                    dataBound: onDataBoundchild,
                    editable: false,
                    sortable: true,
                    scrollable: true,
                    filterable: true,
                    pagable: false,
                    resizable: true,
                    persistSelection: true,
                    selectable: "false",
                    pageable: {
                        pageSize: 10,
                        buttonCount: 4
                    },
                    columns: columns,
                    rows: viewModel

                };

                $("#detgrid").remove();
                $('#Childgrid').append('<div id="detgrid" style="position:relative" class="k-content"><table id="Detailgrid" data-bind="source: gridRows" style="position:relative;overflow:scroll;width:100%"></table></div>');
                var timeEditGrid = $("#Detailgrid").kendoGrid(configuration).data("kendoGrid");

                kendo.bind($("#Detailgrid"), viewModel);

                var grid = $("#Detailgrid").data("kendoGrid");
                grid.hideColumn(1);
                grid.hideColumn(2);
                //grid.hideColumn(4);
                //grid.hideColumn(5);
                for (var i = 0; i < grid.columns.length; i++) {
                    if (i != grid.columns.length) {
                        grid.autoFitColumn(i);  //autofit each column.

                    }
                }
                $('#btnbulmail').prop('disabled', false);
                //bind click event to the checkbox
                grid.table.on("click", ".checkbox", selectRowchild);

                $('#btnupdate').prop('disabled', false);
            },
            error: function () {
                $.alert({
                    title: 'DMS',
                    content: 'Some error has occurred.!',
                    type: 'red',
                });
            }
        });
    }



    //on dataBound event restore previous selected rows:
    function onDataBoundchild(e) {
        debugger
        var checked = [];
        for (var i in checkedIds) {
            if (checkedIds[i]) {
                checked.push(i);
                //row.addClass("k-state-selected");
            }
        }
        debugger
        var view = this.dataSource.view();
        for (var i = 0; i < view.length; i++) {
            if (checkedIds[view[i].entries[0]]) {
                this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                //.addClass("k-state-selected")
                .addClass("k-gridtest")
                .find(".checkbox")
                .attr("checked", "checked");
            }
        }
    }


    //on click of the checkbox:
    function selectRowchild() {
        debugger
        var grid1 = $("#Detailgrid").data("kendoGrid");
        var checked = this.checked,
        row = $(this).closest("tr"),//$("input:checked", grid1.tbody).closest("tr");//$(this).closest("tr"),
        gridss = $("#Detailgrid").data("kendoGrid"),
        dataItem = gridss.dataItem(row);

        checkedIds[dataItem.entries[0]] = checked;
        if (checked) {
            //-select the row
            //row.addClass("k-state-selected");
            row.addClass("k-gridtest");
        }
        else {
            //-remove selection
            //row.removeClass("k-state-selected");
            row.removeClass("k-gridtest");
        }
    }
    function ClearData() {
        window.location.href = '@Url.Action("RetrivalChk", "DespatchtRetrieval")';
    }

    //$('#Despatchdate').datepicker({
    //    dateFormat: "dd-mm-yy",
    //    changeMonth: true,
    //    changeYear: true
    //})

    function Update() {

        debugger
        //debugger
        //var grid1 = $("#Detailgrid").data("kendoGrid");

        //// Get checked row by getting the input and then the row containing the input
        //var row1 = $("#retrievalchdcheckbox:checked", grid1.tbody).closest("tr");
        //if (row1.length == 0) {
        //    $.alert({
        //        title: 'DMS',
        //        content: 'Select any one records in MainGrid to get Attributes.!',
        //        type: 'blue',
        //    });
        //    return false;
        //}
        //var Retriveid = [];
        //var Retriveid1;
        //for (var i = 0; i < row1.length; i++) {
        //    var item1 = grid1.dataItem(row1[i]);
        //    var Grid1ID = item1.entries[0];
        //    Retriveid.push(Grid1ID);
        //}
        //var count1 = row1.length;
        //if (Retriveid != 0 && Retriveid != null && Retriveid != "") {
        //    Retriveid1 = Retriveid.join(",");
        //}

        var Retriveid1 = "@Model.Request_gid";
        var DespatchMode = '0'//$("#DespatchMode").val();
        var Despatchdate = $("#Despatchdate").val();
        var DespatchNote = $("#DespatchNote").val();
        /* if (DespatchMode == "" || DespatchMode == null || DespatchMode == "undefined" || DespatchMode == 0) {
             alert("DespatchMode should not be Empty!");
             return false;
         }*/
        if (Despatchdate == "" || Despatchdate == null || Despatchdate == "undefined" || Despatchdate == 0) {
            alert("Despatchdate should not be Empty!");
            return false;
        }
        if (DespatchNote == "" || DespatchNote == null || DespatchNote == "undefined" || DespatchNote == 0) {
            alert("DespatchNote should not be Empty!");
            return false;
        }
        $.ajax({
            url: '@Url.Action("updatereturnRetrivalData", "DespatchtRetrieval")',
            // data: { 'Retrivid': Retriveid1, 'DespatchMode': DespatchMode, 'Despatchdate': Despatchdate, 'DespatchNote': DespatchNote },
            data: { 'Retrivid': Retriveid1, 'Despatchdate': Despatchdate, 'DespatchNote': DespatchNote },
            success: function (result) {
                var data = JSON.parse(result.Data1);
                debugger;
                if (data[0].Clear == "0") {
                    $.alert({
                        title: 'DMS',
                        content: data[0].Message,
                        type: 'blue',
                    });
                    //Getsummary();
                   // GetDetailData();
                }
                else {
                    $.alert({
                        title: 'DMS',
                        content: 'Error' + result.Data1,
                        type: 'blue',
                    });
                }
            },
            error: function (result) {
                alert("Error" + result.Data1);
            }
        });

       
    }

    function View(type) {
        debugger;

        objDialog5 = $("[id$='ForAttributeDetailsPartialView']");
        objDialog5.dialog({
            autoOpen: false,
            modal: true,
            width: 1250,
            height: 680,
            ////position: ['bottom', 'center'],
            //position: ['center', 'center'],

        });
        var grid;
        grid = $("#Detailgrid").data("kendoGrid");
        model = grid.dataItem($(event.target).closest("tr"));
        $("#hdn_filegid").val("");
        //filegid = (model.entries[2]);
        filegid = (model.entries[1]);
        $("#hdn_filegid").val(filegid);
        var mode = type;
        objDialog5.load('../DespatchtRetrieval/ViewIndexedDocDetails?filegid=' + filegid);
        objDialog5.dialog({ title: 'View' });
        objDialog5.dialog("open");
    }

    function ViewDocument(type) {
        debugger;
        var grid;
        var model;
        var viewid;
        if (type == "link") {
            grid = $("#Linktable").data("kendoGrid");
            model = grid.dataItem($(event.target).closest("tr"));
            viewid = (model.entries[0]);
        }
        if (type == "interfiling") {
            grid = $("#interFiletable").data("kendoGrid");
            model = grid.dataItem($(event.target).closest("tr"));
            viewid = (model.entries[0]);
        }

        var mode = type;
        var url = '../TreeSearch/showdocuments?viewid=' + viewid + '&mode=' + mode;
        window.open(url, "popupWindow", "width=800,height=650,scrollbars=yes");
    }
    function fetchgridnew() {
        // var dgroupID;
        // var dnameID;
        debugger;
        $.ajax({
            url: '@Url.Action("GetIndexedRetrivals", "PhysicalArchival")',
            type: "post",
            data: { 'Dgroup1': "@Model.Docgroup_Id", 'Dname1': "@Model.Docname_Id", 'attrib_ids': "@Model.Attrib_ids",'grid_mode':"return" },
            success: function (result) {
                debugger;

                var chkval = JSON.parse(result.Data1);
                var arr = [];
                $.each(chkval, function (i, e) {
                    $.each(e, function (key, val) {
                        arr.push(val);
                    });
                });

                if (arr == "NoRecords") {
                    $.alert({
                        title: 'DMS',
                        content: 'No Records found..!',
                        type: 'blue',
                    });
                    return false;
                }

                var columns = [];
                var data = JSON.parse(result.Data1);
                var data2 = JSON.parse(result.Data2);
                var i = 0;

                var entryIndex = "entries[" + i + "]";

                for (var key in data[0]) {
                    var val = data2[0][key];
                    if (val == "DateTime") {

                        columns.push({
                            field: entryIndex,
                            title: key,
                            width: '150px',
                            type: val, parseFormats: "{0:MM-dd-yyyy}",
                            format: "{0: dd-MM-yyyy}",
                            width: '100px',
                        });
                    }
                    else {

                        columns.push({
                            field: entryIndex,
                            title: key,
                            width: '150px',
                            type: val,
                        });
                    }

                    i = i + 1;
                    entryIndex = "entries[" + i + "]";
                }
                var rows = [];
                var data1 = JSON.parse(result.Data1);

                $.each(data1, function (i, e) {
                    var entryArray = [];
                    $.each(e, function (key, val) {

                        entryArray.push(val);
                    });
                    rows.push(kendo.observable({
                        entries: entryArray
                    }));

                });

                var viewModel = kendo.observable({
                    gridRows: rows
                });

                var configuration = {
                    editable: false,
                    sortable: true,
                    scrollable: true,
                    filterable: true,
                    pagable: true,
                    resizable: true,
                    //selectable: 'row',
                    pageable: {
                        pageSize: 5,
                        buttonCount: 4
                    },
                    columns: columns,
                    rows: viewModel,
                    //height: '100%',
                    dataBound: function (e) {
                        debugger;
                        @*$(".checkbox").bind("change", function (e) {
                            debugger;
                            var grid = $("#grid").data("kendoGrid");
                            var row = $(e.target).closest("tr");
                            var item = grid.dataItem(row[0]);
                            var GridID = item.entries[0];

                            $.ajax({
                                url: '@Url.Action("checkvalidone", "PhysicalArchival")',
                                data: { 'GridID': GridID },
                                success: function (data) {
                                    debugger;
                                    if (data == "Exist") {
                                        $.alert({
                                            title: 'DMS',
                                            content: 'Selected item is already created.!!',
                                            type: 'blue',
                                        });
                                        $(e.target).closest("tr").find("input[type='checkbox']").prop('checked', false);
                                        //$("#grid tbody input:checkbox").removeAttr("checked");
                                        return false;
                                    }
                                },
                            });
                        });*@
                        },
                };
                $("#example").remove();
                $('#Maingrid').append('<div id="example" class="table-responsive text-nowrap" id="chk1"><table id="grid" data-bind="source: gridRows" class="table table-sm" style="width:100%;height:auto;line-height:1em;font-size:12px;"></table></div>');
                var timeEditGrid = $("#grid").kendoGrid(configuration).data("kendoGrid");
                kendo.bind($("#grid"), viewModel);
                //autofit each column.
                var grid = $("#grid").data("kendoGrid");
                for (var i = 0; i < grid.columns.length; i++) {
                    grid.autoFitColumn(i);
                }
                grid.hideColumn(0);
            },
            error: function (result) {
                $.alert({
                    title: ' ',
                    content: "Failed to fetch.!",
                    type: 'red',
                });
            }
        });
    }
</script>
