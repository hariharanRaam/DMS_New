@{
    ViewBag.Title = "RetrivalChk";
}

<div class="content-wrapper">
    <!-- Main content -->
    <div class="box-header text-center with-border">
        <h3 class="box-title">Handover Docs</h3>
    </div>

    <section class="content">
        <!-- Small boxes (Stat box) -->
        <div class="row">

            <div class="col-md-9" style="margin:auto;max-height:620px;max-width:100%;padding-left: -10px;padding-left: -15px;">
                <div class="col-md-9" style="width:135%;padding-left: 2px;padding-top: -11px;">
                    <div class=" panel panel-primary" style="height:360px;">
                        <div class="panel-heading">Retrival Summary</div>
                        <div class="panel-body" style="padding-right:50px;width:100%;max-height:100%">
                            <div class="col-md-9" style="margin:auto;overflow:auto;width:104%;">
                                <div id="Maingrid" class="col-md-9" style="margin:auto;height:300px;top:10px;width:100%;"> </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <div class="col-md-9" style="top:10%">
                <div>
                    <table style="width:120%;">
                        <tr>
                            <td><select id="DespatchMode" name="DespatchMode" class="form-control" style="font-weight:normal;width:135px;"></select></td>
                            <td><label style="font-weight:bold; white-space:nowrap;">Despatch Date:</label></td>
                            <td>@Html.Editor("Despatchdate", null, new { htmlAttributes = new { @class = "form-control", style = "height:30px;width:200px;" } })</td>

                            <td><label style="font-weight:bold; white-space:nowrap;">Despatch Note:</label></td>

                            <td style="width:250px;padding-bottom: 8px;padding-right: 10px;">@Html.Editor("DespatchNote", null, new { htmlAttributes = new { @class = "form-control", style = "height:45px;width:200px;" } })</td>

                            <td style="padding-right:2px;"> <button type="button" id="btnupdate" onclick="return Update()" class="btn btn-orange"><i class="fa fa-save"></i> Update</button> </td>

                            <td> <button id="btnGetdata" class="btn btn-orange" onclick="GetDetailData()"><i class="fa fa-search"></i> Search</button> </td>

                            <td> <button class="btn btn-orange" onclick="return ClearData()"><i class="fa fa-refresh"></i> Refresh</button> </td>
                        </tr>

                    </table>
                </div>
            </div>

            <div class="col-md-9" style="margin:auto;max-height:620px;max-width:100%;padding-left: -10px;padding-left: -15px;">
                <div class="col-md-9" style="width:135%;padding-left: 2px;padding-top: -11px;">
                    <div class=" panel panel-primary" style="height:360px;">
                        <div class="panel-heading">Retrival Detail</div>
                        <div class="panel-body" style="padding-right:50px;width:100%;max-height:100%">
                            <div class="col-md-9" style="margin:auto;overflow:auto;width:104%;">
                                <div id="Childgrid" class="col-md-9" style="margin:auto;height:300px;top:10px;width:100%;"> </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row" id="ForAttributeDetailsPartialView"></div>

        </div>
    </section>
    <!-- /.content -->
</div>

<script type="text/javascript">
    var objDialog5;
    $(document).ready(function () {
        $('#btnupdate').prop('disabled', true);
        Getsummary();
    });
    function Getsummary() {
        var checkedIds = {};
        $.ajax({
            url: '@Url.Action("RetrivalchkSummary", "DespatchtRetrieval")',
            type: "Post",
            data: {},
            success: function (result) {

                debugger
                var data = JSON.parse(result.Data3)
                for (var i = 0; i < data.length; i++) {
                    var opt = new Option(data[i].despatchmode_Name, data[i].despatchmode_gid);
                    var opt2 = new Option(data[0].despatchmode_Name, data[0].despatchmode_gid);
                    $('#DespatchMode').append(opt);
                }

                debugger
                var columns = [];
                var chkval = JSON.parse(result.Data1);
                var arr = [];
                $.each(chkval, function (i, e) {
                    debugger;
                    $.each(e, function (key, val) {
                        arr.push(val);
                    });
                });

                if (arr == "No Records Found!" || arr == "Error in Data!") {
                    $.alert({
                        title: 'DMS',
                        content: 'No Records found..!',
                        type: 'blue',
                    });
                    $('#btnbulmail').prop('disabled', true);
                    return false;
                }

                var data = JSON.parse(result.Data1);
                var data2 = JSON.parse(result.Data2);
                var i = 0;

                var entryIndex = "entries[" + i + "]";
                columns.push({
                    title: "Select",
                    template: '<input type="checkbox" name="retrievalcheckbox" id="retrievalcheckbox" value="" class="checkbox" ></span>'

                });

                for (var key in data[0]) {
                    var val = data2[0][key];
                    columns.push({
                        field: entryIndex,
                        title: key,
                        type: val
                    });
                    i = i + 1;
                    entryIndex = "entries[" + i + "]";
                }

                var rows = [];
                var data1 = JSON.parse(result.Data1);

                $.each(data1, function (i, e) {
                    var entryArray = [];
                    $.each(e, function (key, val) {

                        entryArray.push(val);
                    });
                    rows.push(kendo.observable({
                        entries: entryArray
                    }));

                });

                var viewModel = kendo.observable({
                    gridRows: rows
                });

                var configuration = {
                    dataBound: onDataBound,
                    editable: false,
                    sortable: true,
                    scrollable: true,
                    filterable: true,
                    pagable: false,
                    resizable: true,
                    persistSelection: true,
                    selectable: "false",
                    pageable: {
                        pageSize: 10,
                        buttonCount: 4
                    },
                    columns: columns,
                    rows: viewModel
                };

                $("#example").remove();
                $('#Maingrid').append('<div id="example" style="position:relative" class="k-content"><table id="grid" data-bind="source: gridRows" style="position:relative;overflow:scroll;width:100%"></table></div>');
                var timeEditGrid = $("#grid").kendoGrid(configuration).data("kendoGrid");

                kendo.bind($("#grid"), viewModel);

                var grid = $("#grid").data("kendoGrid");
                //grid.hideColumn(1);
                //grid.hideColumn(4);
                //grid.hideColumn(5);
                for (var i = 0; i < grid.columns.length; i++) {
                    if (i != grid.columns.length) {
                        grid.autoFitColumn(i);  //autofit each column.

                    }
                }
                $('#btnbulmail').prop('disabled', false);
                //bind click event to the checkbox
                grid.table.on("click", ".checkbox", selectRow);
            },
            error: function (result) {
                //alert("Error" + result.Data1);
                $.alert({
                    title: 'DMS',
                    content: 'Error.!' + result.Data1,
                    type: 'blue',
                });
            }
        });

        //on dataBound event restore previous selected rows:
        function onDataBound(e) {
            debugger
            var checked = [];
            for (var i in checkedIds) {
                if (checkedIds[i]) {
                    checked.push(i);
                    //row.addClass("k-state-selected");
                }
            }
            debugger
            var view = this.dataSource.view();
            for (var i = 0; i < view.length; i++) {
                if (checkedIds[view[i].entries[0]]) {
                    this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                    //.addClass("k-state-selected")
                    .addClass("k-gridtest")
                    .find(".checkbox")
                    .attr("checked", "checked");
                }
            }


        }


        //on click of the checkbox:
        function selectRow() {
            debugger
            var grid1 = $("#grid").data("kendoGrid");
            var checked = this.checked,
            row = $(this).closest("tr"),//$("input:checked", grid1.tbody).closest("tr");//$(this).closest("tr"),
            gridss = $("#grid").data("kendoGrid"),
            dataItem = gridss.dataItem(row);

            checkedIds[dataItem.entries[0]] = checked;
            if (checked) {
                //-select the row
                //row.addClass("k-state-selected");
                row.addClass("k-gridtest");
            }
            else {
                //-remove selection
                //row.removeClass("k-state-selected");
                row.removeClass("k-gridtest");
            }
        }
    }

    var checkedIds = {};
    function GetDetailData() {
        debugger
        var grid1 = $("#grid").data("kendoGrid");

        // Get checked row by getting the input and then the row containing the input
        var row1 = $("#retrievalcheckbox:checked", grid1.tbody).closest("tr");
        if (row1.length == 0) {
            $.alert({
                title: 'DMS',
                content: 'Select any one records in MainGrid to get Attributes.!',
                type: 'blue',
            });
            return false;
        }
        var Retriveid = [];
        var Retriveid1;
        for (var i = 0; i < row1.length; i++) {
            var item1 = grid1.dataItem(row1[i]);
            var Grid1ID = item1.entries[0];
            Retriveid.push(Grid1ID);
        }
        var count1 = row1.length;
        if (Retriveid != 0 && Retriveid != null && Retriveid != "") {
            Retriveid1 = Retriveid.join(",");
        }

        $.ajax({
            url: '@Url.Action("RetrivalchkdetData", "DespatchtRetrieval")',
            data: { 'Retrivid': Retriveid1 },
            success: function (result) {
                debugger;
                var columns = [];
                var chkval = JSON.parse(result.Data1);
                var arr = [];
                $.each(chkval, function (i, e) {
                    debugger;
                    $.each(e, function (key, val) {
                        arr.push(val);
                    });

                });

                if (arr == "No Records Found!" || arr == "Error in Data!") {
                    $.alert({
                        title: 'DMS',
                        content: 'No Records found..!',
                        type: 'blue',
                    });
                    $('#btnbulmail').prop('disabled', true);
                    return false;
                }


                var data = JSON.parse(result.Data1);
                var data2 = JSON.parse(result.Data2);
                var i = 0;

                var entryIndex = "entries[" + i + "]";
                columns.push({
                    title: "Select",
                    template: '<input type="checkbox" name="retrievalchdcheckbox" id="retrievalchdcheckbox" value="" class="checkbox" ></span>'

                });

                for (var key in data[0]) {
                    var val = data2[0][key];
                    columns.push({
                        field: entryIndex,
                        title: key,
                        type: val
                    });
                    i = i + 1;
                    entryIndex = "entries[" + i + "]";

                }


                columns.push({
                    field: entryIndex + 1,
                    title: 'View File',
                    template: '<span class="fa fa-eye view" name="view" id="view" value="view"   onclick=View("main")></span>',
                    //template: '<span class="glyphicon glyphicon-download Download" name="Download" id="Download" value="Download" onclick="Download()"></span>',
                    filterable: false,
                    sortable: true,
                    editable: true
                });

                var rows = [];
                var data1 = JSON.parse(result.Data1);

                $.each(data1, function (i, e) {
                    var entryArray = [];
                    $.each(e, function (key, val) {

                        entryArray.push(val);
                    });
                    rows.push(kendo.observable({
                        entries: entryArray
                    }));

                });

                var viewModel = kendo.observable({
                    gridRows: rows
                });

                var configuration = {
                    dataBound: onDataBoundchild,
                    editable: false,
                    sortable: true,
                    scrollable: true,
                    filterable: true,
                    pagable: false,
                    resizable: true,
                    persistSelection: true,
                    selectable: "false",
                    pageable: {
                        pageSize: 10,
                        buttonCount: 4
                    },
                    columns: columns,
                    rows: viewModel

                };

                $("#detgrid").remove();
                $('#Childgrid').append('<div id="detgrid" style="position:relative" class="k-content"><table id="Detailgrid" data-bind="source: gridRows" style="position:relative;overflow:scroll;width:100%"></table></div>');
                var timeEditGrid = $("#Detailgrid").kendoGrid(configuration).data("kendoGrid");

                kendo.bind($("#Detailgrid"), viewModel);

                var grid = $("#Detailgrid").data("kendoGrid");
                grid.hideColumn(1);
                grid.hideColumn(2);
                //grid.hideColumn(4);
                //grid.hideColumn(5);
                for (var i = 0; i < grid.columns.length; i++) {
                    if (i != grid.columns.length) {
                        grid.autoFitColumn(i);  //autofit each column.

                    }
                }
                $('#btnbulmail').prop('disabled', false);
                //bind click event to the checkbox
                grid.table.on("click", ".checkbox", selectRowchild);

                $('#btnupdate').prop('disabled', false);
            },
            error: function () {
                $.alert({
                    title: 'DMS',
                    content: 'Some error has occurred.!',
                    type: 'red',
                });
            }
        });
    }



    //on dataBound event restore previous selected rows:
    function onDataBoundchild(e) {
        debugger
        var checked = [];
        for (var i in checkedIds) {
            if (checkedIds[i]) {
                checked.push(i);
                //row.addClass("k-state-selected");
            }
        }
        debugger
        var view = this.dataSource.view();
        for (var i = 0; i < view.length; i++) {
            if (checkedIds[view[i].entries[0]]) {
                this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                //.addClass("k-state-selected")
                .addClass("k-gridtest")
                .find(".checkbox")
                .attr("checked", "checked");
            }
        }
    }


    //on click of the checkbox:
    function selectRowchild() {
        debugger
        var grid1 = $("#Detailgrid").data("kendoGrid");
        var checked = this.checked,
        row = $(this).closest("tr"),//$("input:checked", grid1.tbody).closest("tr");//$(this).closest("tr"),
        gridss = $("#Detailgrid").data("kendoGrid"),
        dataItem = gridss.dataItem(row);

        checkedIds[dataItem.entries[0]] = checked;
        if (checked) {
            //-select the row
            //row.addClass("k-state-selected");
            row.addClass("k-gridtest");
        }
        else {
            //-remove selection
            //row.removeClass("k-state-selected");
            row.removeClass("k-gridtest");
        }
    }
    function ClearData() {
        window.location.href = '@Url.Action("RetrivalChk", "DespatchtRetrieval")';
    }

    $('#Despatchdate').datepicker({
        dateFormat: "dd-mm-yy",
        changeMonth: true,
        changeYear: true
    })

    function Update() {

        debugger
        var grid1 = $("#Detailgrid").data("kendoGrid");

        // Get checked row by getting the input and then the row containing the input
        var row1 = $("#retrievalchdcheckbox:checked", grid1.tbody).closest("tr");
        if (row1.length == 0) {
            $.alert({
                title: 'DMS',
                content: 'Select any one records in MainGrid to get Attributes.!',
                type: 'blue',
            });
            return false;
        }
        var Retriveid = [];
        var Retriveid1;
        for (var i = 0; i < row1.length; i++) {
            var item1 = grid1.dataItem(row1[i]);
            var Grid1ID = item1.entries[0];
            Retriveid.push(Grid1ID);
        }
        var count1 = row1.length;
        if (Retriveid != 0 && Retriveid != null && Retriveid != "") {
            Retriveid1 = Retriveid.join(",");
        }


        var DespatchMode = $("#DespatchMode").val();
        var Despatchdate = $("#Despatchdate").val();
        var DespatchNote = $("#DespatchNote").val();
        if (DespatchMode == "" || DespatchMode == null || DespatchMode == "undefined" || DespatchMode == 0) {
            // alert("DespatchMode should not be Empty!");
            $.alert({
                title: 'DMS',
                content: 'DespatchMode should not be Empty..!',
                type: 'blue',
            });
            return false;
        }
        if (Despatchdate == "" || Despatchdate == null || Despatchdate == "undefined" || Despatchdate == 0) {
            //alert("Despatchdate should not be Empty!");
            $.alert({
                title: 'DMS',
                content: 'Despatchdate should not be Empty..!',
                type: 'blue',
            });
            return false;
        }
        if (DespatchNote == "" || DespatchNote == null || DespatchNote == "undefined" || DespatchNote == 0) {
            // alert("DespatchNote should not be Empty!");
            $.alert({
                title: 'DMS',
                content: 'DespatchNote should not be Empty..!',
                type: 'blue',
            });
            return false;
        }
        $.ajax({
            url: '@Url.Action("updateRetrivalData", "DespatchtRetrieval")',
            data: { 'Retrivid': Retriveid1, 'DespatchMode': DespatchMode, 'Despatchdate': Despatchdate, 'DespatchNote': DespatchNote },
            success: function (result) {
                var data = JSON.parse(result.Data1);
                debugger;
                if (data[0].Clear == "0") {
                    // alert(data[0].Message);
                    $.alert({
                        title: 'DMS',
                        content: data[0].Message,
                        type: 'blue',
                    });
                    Getsummary();
                    GetDetailData();
                }
                else {
                    // alert("Despatch Updload Fail!");
                    $.alert({
                        title: 'DMS',
                        content: 'Despatch Updload Fail..!',
                        type: 'blue',
                    });
                }
            },
            error: function (result) {
                //alert("Error" + result.Data1);
                $.alert({
                    title: 'DMS',
                    content: 'Error' + result.Data1,
                    type: 'blue',
                });
            }
        });
    }

    function View(type) {
        debugger;

        objDialog5 = $("[id$='ForAttributeDetailsPartialView']");
        objDialog5.dialog({
            autoOpen: false,
            modal: true,
            width: 1250,
            height: 680,
            ////position: ['bottom', 'center'],
            //position: ['center', 'center'],

        });
        var grid;
        grid = $("#Detailgrid").data("kendoGrid");
        model = grid.dataItem($(event.target).closest("tr"));
        $("#hdn_filegid").val("");
        //filegid = (model.entries[2]);
        filegid = (model.entries[1]);
        $("#hdn_filegid").val(filegid);
        var mode = type;
        objDialog5.load('../DespatchtRetrieval/ViewIndexedDocDetails?filegid=' + filegid);
        objDialog5.dialog({ title: 'View' });
        objDialog5.dialog("open");
    }

    function ViewDocument(type) {
        debugger;
        var grid;
        var model;
        var viewid;
        if (type == "link") {
            grid = $("#Linktable").data("kendoGrid");
            model = grid.dataItem($(event.target).closest("tr"));
            viewid = (model.entries[0]);
        }
        if (type == "interfiling") {
            grid = $("#interFiletable").data("kendoGrid");
            model = grid.dataItem($(event.target).closest("tr"));
            viewid = (model.entries[0]);
        }

        var mode = type;
        var url = '../TreeSearch/showdocuments?viewid=' + viewid + '&mode=' + mode;
        window.open(url, "popupWindow", "width=800,height=650,scrollbars=yes");
    }
</script>
